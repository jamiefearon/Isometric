// Generated by CoffeeScript 1.3.3
(function() {
  var AssetManager, CanvasRenderer, Game, IsoGame, IsometricGrid, Sprite, assetManager, init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  AssetManager = (function() {

    function AssetManager() {
      this.successCount = 0;
      this.errorCount = 0;
      this.cache = {};
      this.downloadQueue = [];
    }

    AssetManager.prototype.queueDownload = function(path) {
      return this.downloadQueue.push(path);
    };

    AssetManager.prototype.downloadAll = function(downloadCallback) {
      var img, path, _i, _len, _ref, _results,
        _this = this;
      if (this.downloadQueue.length === 0) {
        downloadCallback();
      }
      _ref = this.downloadQueue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        img = new Image();
        img.addEventListener('load', function() {
          _this.successCount += 1;
          if (_this.isDone) {
            return downloadCallback();
          }
        }, false);
        img.addEventListener('error', function() {
          _this.errorCount += 1;
          if (_this.isDone) {
            return downloadCallback();
          }
        }, false);
        img.src = path;
        _results.push(this.cache[path] = img);
      }
      return _results;
    };

    AssetManager.prototype.isDone = function() {
      return this.downloadQueue.length === this.successCount + this.errorCount;
    };

    AssetManager.prototype.getAsset = function(path) {
      return this.cache[path];
    };

    return AssetManager;

  })();

  CanvasRenderer = (function() {

    function CanvasRenderer() {
      this.resizeCanvas = __bind(this.resizeCanvas, this);

      this.fixSizeToScreen = __bind(this.fixSizeToScreen, this);

      this.setSize = __bind(this.setSize, this);

      this.clear = __bind(this.clear, this);
      this.canvas = document.createElement('canvas');
      $('#container').append(this.canvas);
      this.context = this.canvas.getContext("2d");
    }

    CanvasRenderer.prototype.clear = function(colour) {
      this.context.fillStyle = colour;
      return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    CanvasRenderer.prototype.setSize = function(width, height) {
      this.canvas.width = width;
      return this.canvas.height = height;
    };

    CanvasRenderer.prototype.fixSizeToScreen = function() {
      window.addEventListener('resize', this.resizeCanvas, false);
      return this.resizeCanvas();
    };

    CanvasRenderer.prototype.resizeCanvas = function() {
      return this.setSize(window.innerWidth, window.innerHeight);
    };

    return CanvasRenderer;

  })();

  IsometricGrid = (function() {

    IsometricGrid.renderer = null;

    function IsometricGrid(parameters) {
      this.handleMouseDown = __bind(this.handleMouseDown, this);

      this.handleMouseUp = __bind(this.handleMouseUp, this);

      this.handleDrag = __bind(this.handleDrag, this);

      this.handleKeyDown = __bind(this.handleKeyDown, this);

      var _ref, _ref1, _ref2, _ref3,
        _this = this;
      this.tileMap = (_ref = parameters.tileMap) != null ? _ref : [];
      this.width = (_ref1 = parameters.width) != null ? _ref1 : 4;
      this.height = (_ref2 = parameters.height) != null ? _ref2 : 4;
      this.defaultTile = (_ref3 = parameters.defaultTile) != null ? _ref3 : null;
      if (this.defaultTile !== null) {
        this.tileWidth = this.defaultTile.width;
        this.tileHeight = this.defaultTile.height;
      }
      this.scrollPosition = {
        x: 0,
        y: 0
      };
      this.dragHelper = {
        active: false,
        x: 0,
        y: 0
      };
      this.Keys = {
        UP: 38,
        DOWN: 40,
        LEFT: 37,
        RIGHT: 39,
        W: 87,
        A: 65,
        S: 83,
        D: 68,
        Z: 90,
        X: 88,
        R: 82
      };
      window.addEventListener('keydown', function(e) {
        return _this.handleKeyDown(e);
      }, false);
      window.addEventListener('mousedown', function(e) {
        return _this.handleMouseDown(e);
      }, false);
      window.addEventListener('mousemove', function(e) {
        return _this.handleDrag(e);
      }, false);
      window.addEventListener('mouseup', function(e) {
        return _this.handleMouseUp(e);
      }, false);
    }

    IsometricGrid.prototype.translatePixelsToMatrix = function(x, y) {
      var col, gridOffsetX, gridOffsetY, row;
      gridOffsetY = this.height + this.scrollPosition.y;
      gridOffsetX = this.width;
      gridOffsetX += (IsometricGrid.renderer.canvas.width / 2) - (this.tileWidth / 2) + this.scrollPosition.x;
      col = (2 * (y - gridOffsetY) - x + gridOffsetX) / 2;
      row = x + col - gridOffsetX - this.tileHeight;
      col = Math.round(col / this.tileHeight);
      row = Math.round(row / this.tileHeight);
      return {
        row: row,
        col: col
      };
    };

    IsometricGrid.prototype.draw = function() {
      var col, colCount, pos_BL, pos_BR, pos_TL, pos_TR, row, rowCount, startCol, startRow, xpos, ypos, _i, _results;
      pos_TL = this.translatePixelsToMatrix(1, 1);
      pos_BL = this.translatePixelsToMatrix(1, IsometricGrid.renderer.canvas.height);
      pos_TR = this.translatePixelsToMatrix(IsometricGrid.renderer.canvas.width, 1);
      pos_BR = this.translatePixelsToMatrix(IsometricGrid.renderer.canvas.width, IsometricGrid.renderer.canvas.height);
      startRow = pos_TL.row;
      startCol = pos_TR.col;
      rowCount = pos_BR.row + 1;
      colCount = pos_BL.col + 1;
      if (startRow < 0) {
        startRow = 0;
      }
      if (startCol < 0) {
        startCol = 0;
      }
      if (rowCount > this.width) {
        rowCount = this.width;
      }
      if (colCount > this.height) {
        colCount = this.height;
      }
      if (IsoGame.settings.techStats) {
        $("#rowStart").html(startRow);
        $("#colStart").html(startRow);
        $("#rowEnd").html(rowCount);
        $("#colEnd").html(colCount);
      }
      _results = [];
      for (row = _i = startRow; startRow <= rowCount ? _i <= rowCount : _i >= rowCount; row = startRow <= rowCount ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = startCol; startCol <= colCount ? _j <= colCount : _j >= colCount; col = startCol <= colCount ? ++_j : --_j) {
            xpos = (row - col) * this.tileHeight + this.width;
            xpos += (IsometricGrid.renderer.canvas.width / 2) - (this.tileWidth / 2) + this.scrollPosition.x;
            ypos = (row + col) * (this.tileHeight / 2) + this.height + this.scrollPosition.y;
            if (Math.round(xpos) + this.tileWidth >= 0 && Math.round(ypos) + this.tileHeight >= 0 && Math.round(xpos) <= IsometricGrid.renderer.canvas.width && Math.round(ypos) <= IsometricGrid.renderer.canvas.height) {
              _results1.push(IsometricGrid.renderer.context.drawImage(this.defaultTile.spritesheet, Math.round(xpos), Math.round(ypos), this.tileWidth, this.tileHeight));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    IsometricGrid.prototype.handleKeyDown = function(e) {
      switch (e.keyCode) {
        case this.Keys.UP:
        case this.Keys.W:
          return this.scrollPosition.y -= 20;
        case this.Keys.DOWN:
        case this.Keys.S:
          return this.scrollPosition.y += 20;
        case this.Keys.LEFT:
        case this.Keys.A:
          return this.scrollPosition.x -= 20;
        case this.Keys.RIGHT:
        case this.Keys.D:
          return this.scrollPosition.x += 20;
      }
    };

    IsometricGrid.prototype.handleDrag = function(e) {
      var x, y;
      e.preventDefault();
      if (this.dragHelper.active) {
        x = e.clientX;
        y = e.clientY;
        this.scrollPosition.x -= Math.round((this.dragHelper.x - x) / 28);
        return this.scrollPosition.y -= Math.round((this.dragHelper.y - y) / 28);
      }
    };

    IsometricGrid.prototype.handleMouseUp = function(e) {
      e.preventDefault();
      return this.dragHelper.active = false;
    };

    IsometricGrid.prototype.handleMouseDown = function(e) {
      var x, y;
      e.preventDefault();
      x = e.clientX;
      y = e.clientY;
      this.dragHelper.active = true;
      this.dragHelper.x = x;
      return this.dragHelper.y = y;
    };

    return IsometricGrid;

  })();

  Sprite = (function() {

    Sprite.renderer = null;

    function Sprite(parameters) {
      this.draw = __bind(this.draw, this);

      this.nextFrame = __bind(this.nextFrame, this);

      this.animate = __bind(this.animate, this);

      this.setPosition = __bind(this.setPosition, this);

      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.src = (_ref = parameters.src) != null ? _ref : console.log('Sprite source map does not exist');
      this.spritesheet = new Image();
      this.spritesheet.src = this.src.src;
      this.posX = (_ref1 = parameters.x) != null ? _ref1 : 0;
      this.posY = (_ref2 = parameters.y) != null ? _ref2 : 0;
      this.width = (_ref3 = parameters.width) != null ? _ref3 : this.spritesheet.width;
      this.height = (_ref4 = parameters.height) != null ? _ref4 : this.spritesheet.height;
      this.offsetX = (_ref5 = parameters.offsetX) != null ? _ref5 : 0;
      this.offsetY = (_ref6 = parameters.offsetY) != null ? _ref6 : 0;
      this.frames = (_ref7 = parameters.frames) != null ? _ref7 : 0;
      this.duration = (_ref8 = parameters.duration) != null ? _ref8 : 0;
      this.currentFrame = 0;
      this.currentTime = (new Date()).getTime();
      this.ftime = this.currentTime + (this.duration / this.frames);
    }

    Sprite.prototype.setPosition = function(x, y) {
      this.posX = x;
      return this.posY = y;
    };

    Sprite.prototype.animate = function() {
      if (this.currentTime > this.ftime) {
        this.nextFrame();
      }
      this.currentTime = (new Date()).getTime();
      return this.draw();
    };

    Sprite.prototype.nextFrame = function() {
      var d;
      if (this.duration > 0) {
        d = new Date();
        this.ftime = d.getTime() + (this.duration / this.frames);
        this.offsetX = this.width * this.currentFrame;
        if (this.currentFrame === this.frames - 1) {
          return this.currentFrame = 0;
        } else {
          return this.currentFrame++;
        }
      }
    };

    Sprite.prototype.draw = function() {
      return Sprite.renderer.context.drawImage(this.spritesheet, this.offsetX, this.offsetY, this.width, this.height, this.posX, this.posY, this.width, this.height);
    };

    return Sprite;

  })();

  IsoGame = (function() {

    IsoGame.settings = {
      techStats: false
    };

    function IsoGame() {
      this.displayTech = __bind(this.displayTech, this);

      this.displayFps = __bind(this.displayFps, this);

      this.createRenderer = __bind(this.createRenderer, this);

      this.animloop = __bind(this.animloop, this);
      this.renderer = null;
      this.frameCount = 0;
      this.fps = 0;
      this.startTime = (new Date()).getTime();
    }

    IsoGame.prototype.animloop = function() {
      var currentTime;
      requestAnimFrame(this.animloop);
      this.frameCount++;
      currentTime = (new Date()).getTime();
      if (currentTime - this.startTime > 1000) {
        this.fps = this.frameCount;
        this.frameCount = 0;
        return this.startTime = (new Date()).getTime();
      }
    };

    IsoGame.prototype.createRenderer = function(type) {
      if (type === 'canvas') {
        this.renderer = new CanvasRenderer;
        Sprite.renderer = this.renderer;
        return IsometricGrid.renderer = this.renderer;
      } else {

      }
    };

    IsoGame.prototype.displayFps = function() {
      return $("#fps").html(this.fps);
    };

    IsoGame.prototype.displayTech = function(value) {
      if (value) {
        $("#stats").css("visibility", "visible");
        return IsoGame.settings.techStats = true;
      } else {
        $("#stats").css("visibility", "hidden");
        return IsoGame.settings.techStats = false;
      }
    };

    return IsoGame;

  })();

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      this.animloop = __bind(this.animloop, this);

      var grass;
      Game.__super__.constructor.apply(this, arguments);
      this.createRenderer('canvas');
      this.renderer.fixSizeToScreen();
      this.displayTech(true);
      grass = new Sprite({
        src: assetManager.getAsset('image/grass.png')
      });
      this.grid = new IsometricGrid({
        width: 200,
        height: 200,
        defaultTile: grass
      });
      this.animloop();
    }

    Game.prototype.animloop = function() {
      Game.__super__.animloop.apply(this, arguments);
      this.renderer.clear('#FFFFFF');
      this.grid.draw();
      return this.displayFps();
    };

    return Game;

  })(IsoGame);

  assetManager = null;

  init = function() {
    if (!assetManager) {
      $('#gameIntro').hide();
      assetManager = new AssetManager();
      assetManager.queueDownload('image/grass.png');
      assetManager.downloadAll(function() {
        return $('#gameIntro').show();
      });
    }
    return $('#gamePlay').click(function(e) {
      e.preventDefault();
      $('#gameIntro').hide();
      $('#title').hide();
      return window.game = new Game();
    });
  };

  $(document).ready(init);

}).call(this);
