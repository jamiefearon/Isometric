// Generated by CoffeeScript 1.3.3
(function() {
  var AssetManager, BuildingTileSet, CanvasRenderer, Game, IsoGame, IsometricGrid, Sprite, UI, assetManager, init, mapData,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AssetManager = (function() {

    function AssetManager() {
      this.cache = {};
    }

    AssetManager.prototype.addAsset = function(image, tag) {
      this.cache[tag] = image;
      return console.log('adding ' + tag);
    };

    AssetManager.prototype.getAsset = function(tag) {
      console.log('getting ' + tag);
      return this.cache[tag];
    };

    return AssetManager;

  })();

  CanvasRenderer = (function() {

    function CanvasRenderer() {
      this.resizeCanvas = __bind(this.resizeCanvas, this);

      this.fixSizeToScreen = __bind(this.fixSizeToScreen, this);

      this.setSize = __bind(this.setSize, this);

      this.clear = __bind(this.clear, this);
      this.canvas = document.createElement('canvas');
      $('#container').append(this.canvas);
      $('#container canvas')[0].id = 'canvas';
      this.context = this.canvas.getContext("2d");
    }

    CanvasRenderer.prototype.clear = function(colour) {
      this.context.fillStyle = colour;
      return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    CanvasRenderer.prototype.setSize = function(width, height) {
      this.canvas.width = width;
      return this.canvas.height = height;
    };

    CanvasRenderer.prototype.fixSizeToScreen = function() {
      window.addEventListener('resize', this.resizeCanvas, false);
      return this.resizeCanvas();
    };

    CanvasRenderer.prototype.resizeCanvas = function() {
      return this.setSize(window.innerWidth, window.innerHeight);
    };

    return CanvasRenderer;

  })();

  IsometricGrid = (function() {

    IsometricGrid.renderer = null;

    function IsometricGrid(parameters) {
      this.handleMouseDown = __bind(this.handleMouseDown, this);

      this.handleMouseUp = __bind(this.handleMouseUp, this);

      this.handleDrag = __bind(this.handleDrag, this);

      this.handleKeyDown = __bind(this.handleKeyDown, this);

      var _ref, _ref1, _ref2, _ref3,
        _this = this;
      this.tileMap = (_ref = parameters.tileMap) != null ? _ref : [];
      this.width = (_ref1 = parameters.width) != null ? _ref1 : 4;
      this.height = (_ref2 = parameters.height) != null ? _ref2 : 4;
      this.defaultTile = (_ref3 = parameters.defaultTile) != null ? _ref3 : null;
      if (this.defaultTile !== null) {
        this.tileWidth = this.defaultTile.width;
        this.tileHeight = this.defaultTile.height;
      }
      this.scrollPosition = {
        x: 0,
        y: 0
      };
      this.dragHelper = {
        active: false,
        x: 0,
        y: 0
      };
      this.Keys = {
        UP: 38,
        DOWN: 40,
        LEFT: 37,
        RIGHT: 39,
        W: 87,
        A: 65,
        S: 83,
        D: 68,
        Z: 90,
        X: 88,
        R: 82
      };
      window.addEventListener('keydown', function(e) {
        return _this.handleKeyDown(e);
      }, false);
      window.addEventListener('mousedown', function(e) {
        if (e.target.id === 'canvas') {
          return _this.handleMouseDown(e);
        }
      }, false);
      window.addEventListener('mousemove', function(e) {
        if (e.target.id === 'canvas') {
          return _this.handleDrag(e);
        }
      }, false);
      window.addEventListener('mouseup', function(e) {
        if (e.target.id === 'canvas') {
          return _this.handleMouseUp(e);
        }
      }, false);
    }

    IsometricGrid.prototype.translatePixelsToMatrix = function(x, y) {
      var col, gridOffsetX, gridOffsetY, row;
      gridOffsetY = this.height + this.scrollPosition.y;
      gridOffsetX = this.width;
      gridOffsetX += (IsometricGrid.renderer.canvas.width / 2) - (this.tileWidth / 2) + this.scrollPosition.x;
      col = (2 * (y - gridOffsetY) - x + gridOffsetX) / 2;
      row = x + col - gridOffsetX - this.tileHeight;
      col = Math.round(col / this.tileHeight);
      row = Math.round(row / this.tileHeight);
      return {
        row: row,
        col: col
      };
    };

    IsometricGrid.prototype.draw = function() {
      var col, colCount, pos_BL, pos_BR, pos_TL, pos_TR, row, rowCount, startCol, startRow, xpos, ypos, _i, _results;
      pos_TL = this.translatePixelsToMatrix(1, 1);
      pos_BL = this.translatePixelsToMatrix(1, IsometricGrid.renderer.canvas.height);
      pos_TR = this.translatePixelsToMatrix(IsometricGrid.renderer.canvas.width, 1);
      pos_BR = this.translatePixelsToMatrix(IsometricGrid.renderer.canvas.width, IsometricGrid.renderer.canvas.height);
      startRow = pos_TL.row;
      startCol = pos_TR.col;
      rowCount = pos_BR.row + 1;
      colCount = pos_BL.col + 1;
      if (startRow < 0) {
        startRow = 0;
      }
      if (startCol < 0) {
        startCol = 0;
      }
      if (rowCount > this.width) {
        rowCount = this.width;
      }
      if (colCount > this.height) {
        colCount = this.height;
      }
      if (IsoGame.settings.techStats) {
        $("#rowStart").html(startRow);
        $("#colStart").html(startRow);
        $("#rowEnd").html(rowCount);
        $("#colEnd").html(colCount);
      }
      _results = [];
      for (row = _i = startRow; startRow <= rowCount ? _i <= rowCount : _i >= rowCount; row = startRow <= rowCount ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = startCol; startCol <= colCount ? _j <= colCount : _j >= colCount; col = startCol <= colCount ? ++_j : --_j) {
            xpos = (row - col) * this.tileHeight + this.width;
            xpos += (IsometricGrid.renderer.canvas.width / 2) - (this.tileWidth / 2) + this.scrollPosition.x;
            ypos = (row + col) * (this.tileHeight / 2) + this.height + this.scrollPosition.y;
            if (Math.round(xpos) + this.tileWidth >= 0 && Math.round(ypos) + this.tileHeight >= 0 && Math.round(xpos) <= IsometricGrid.renderer.canvas.width && Math.round(ypos) <= IsometricGrid.renderer.canvas.height) {
              _results1.push(IsometricGrid.renderer.context.drawImage(this.defaultTile.spritesheet, Math.round(xpos), Math.round(ypos), this.tileWidth, this.tileHeight));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    IsometricGrid.prototype.handleKeyDown = function(e) {
      switch (e.keyCode) {
        case this.Keys.UP:
        case this.Keys.W:
          return this.scrollPosition.y -= 20;
        case this.Keys.DOWN:
        case this.Keys.S:
          return this.scrollPosition.y += 20;
        case this.Keys.LEFT:
        case this.Keys.A:
          return this.scrollPosition.x -= 20;
        case this.Keys.RIGHT:
        case this.Keys.D:
          return this.scrollPosition.x += 20;
      }
    };

    IsometricGrid.prototype.handleDrag = function(e) {
      var x, y;
      e.preventDefault();
      if (this.dragHelper.active) {
        x = e.clientX;
        y = e.clientY;
        this.scrollPosition.x -= Math.round((this.dragHelper.x - x) / 28);
        return this.scrollPosition.y -= Math.round((this.dragHelper.y - y) / 28);
      }
    };

    IsometricGrid.prototype.handleMouseUp = function(e) {
      e.preventDefault();
      return this.dragHelper.active = false;
    };

    IsometricGrid.prototype.handleMouseDown = function(e) {
      var x, y;
      e.preventDefault();
      x = e.clientX;
      y = e.clientY;
      this.dragHelper.active = true;
      this.dragHelper.x = x;
      return this.dragHelper.y = y;
    };

    return IsometricGrid;

  })();

  Sprite = (function() {

    Sprite.renderer = null;

    function Sprite(parameters) {
      this.getTumbnail = __bind(this.getTumbnail, this);

      this.draw = __bind(this.draw, this);

      this.nextFrame = __bind(this.nextFrame, this);

      this.animate = __bind(this.animate, this);

      this.setPosition = __bind(this.setPosition, this);

      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.spritesheet = (_ref = parameters.spritesheet) != null ? _ref : console.log('ERROR - no spritesheet selected');
      this.posX = (_ref1 = parameters.x) != null ? _ref1 : 0;
      this.posY = (_ref2 = parameters.y) != null ? _ref2 : 0;
      this.width = (_ref3 = parameters.width) != null ? _ref3 : this.spritesheet.width;
      this.height = (_ref4 = parameters.height) != null ? _ref4 : this.spritesheet.height;
      this.offsetX = (_ref5 = parameters.offsetX) != null ? _ref5 : 0;
      this.offsetY = (_ref6 = parameters.offsetY) != null ? _ref6 : 0;
      this.frames = (_ref7 = parameters.frames) != null ? _ref7 : 0;
      this.duration = (_ref8 = parameters.duration) != null ? _ref8 : 0;
      this.currentFrame = 0;
      this.currentTime = (new Date()).getTime();
      this.ftime = this.currentTime + (this.duration / this.frames);
    }

    Sprite.prototype.setPosition = function(x, y) {
      this.posX = x;
      return this.posY = y;
    };

    Sprite.prototype.animate = function() {
      if (this.currentTime > this.ftime) {
        this.nextFrame();
      }
      this.currentTime = (new Date()).getTime();
      return this.draw();
    };

    Sprite.prototype.nextFrame = function() {
      var d;
      if (this.duration > 0) {
        d = new Date();
        this.ftime = d.getTime() + (this.duration / this.frames);
        this.offsetX = this.width * this.currentFrame;
        if (this.currentFrame === this.frames - 1) {
          return this.currentFrame = 0;
        } else {
          return this.currentFrame++;
        }
      }
    };

    Sprite.prototype.draw = function() {
      return Sprite.renderer.context.drawImage(this.spritesheet, this.offsetX, this.offsetY, this.width, this.height, this.posX, this.posY, this.width, this.height);
    };

    Sprite.prototype.getTumbnail = function() {};

    return Sprite;

  })();

  /*
  
  Each spritesheet should look like this:
  
  -----------------------------------------------------------------------------------------------
  building 1 (frame 1)
  -----------------------------------------------------------------------------------------------
  building 2 (frame 1)  -  building 2 (frame 2)  -  building 2 (frame 3) 
  -----------------------------------------------------------------------------------------------
  building 3 (frame 1)  -  building 3 (frame 2) 
  -----------------------------------------------------------------------------------------------
  building 4 (frame 1)  -  building 4 (frame 2)  -  building 4 (frame 3)  -  building 4 (frame 4)
  -----------------------------------------------------------------------------------------------
  
  
  @framesPerBuilding contains an array storing information about how many frames each building has.
  
  Usage, assuming above spritesheet is used:
  
  framesPerBuilding = [1, 3, 2, 4]
  */


  BuildingTileSet = (function() {

    function BuildingTileSet(spritesheet, tileWidth, tileHeight, numberOfBuildings, framesPerBuilding, durationPerBuilding) {
      var buildingSprite, i, _i, _ref;
      this.spritesheet = spritesheet;
      this.tileWidth = tileWidth;
      this.tileHeight = tileHeight;
      this.numberOfBuildings = numberOfBuildings;
      this.framesPerBuilding = framesPerBuilding;
      this.durationPerBuilding = durationPerBuilding;
      this.getBuildingSprite = __bind(this.getBuildingSprite, this);

      this.buildingSprites = new Array();
      for (i = _i = 0, _ref = this.numberOfBuildings - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        buildingSprite = new Sprite({
          spritesheet: this.spritesheet,
          width: this.tileWidth,
          height: this.tileHeight,
          offsetX: 0,
          offsetY: i * this.tileHeight,
          frames: this.framesPerBuilding[i],
          duration: this.durationPerBuilding[i]
        });
        this.buildingSprites.push(buildingSprite);
      }
    }

    BuildingTileSet.prototype.getBuildingSprite = function(lineNumber) {
      return this.buildingSprites[lineNumber];
    };

    return BuildingTileSet;

  })();

  IsoGame = (function() {

    IsoGame.settings = {
      techStats: false
    };

    function IsoGame() {
      this.displayTech = __bind(this.displayTech, this);

      this.displayFps = __bind(this.displayFps, this);

      this.createRenderer = __bind(this.createRenderer, this);

      this.animloop = __bind(this.animloop, this);
      this.renderer = null;
      this.frameCount = 0;
      this.fps = 0;
      this.startTime = (new Date()).getTime();
    }

    IsoGame.prototype.animloop = function() {
      var currentTime;
      requestAnimFrame(this.animloop);
      this.frameCount++;
      currentTime = (new Date()).getTime();
      if (currentTime - this.startTime > 1000) {
        this.fps = this.frameCount;
        this.frameCount = 0;
        return this.startTime = (new Date()).getTime();
      }
    };

    IsoGame.prototype.createRenderer = function(type) {
      if (type === 'canvas') {
        this.renderer = new CanvasRenderer;
        Sprite.renderer = this.renderer;
        return IsometricGrid.renderer = this.renderer;
      } else {

      }
    };

    IsoGame.prototype.displayFps = function() {
      return $("#fps").html(this.fps);
    };

    IsoGame.prototype.displayTech = function(value) {
      if (value) {
        $("#stats").css("visibility", "visible");
        return IsoGame.settings.techStats = true;
      } else {
        $("#stats").css("visibility", "hidden");
        return IsoGame.settings.techStats = false;
      }
    };

    return IsoGame;

  })();

  assetManager = null;

  mapData = {};

  init = function() {
    var loader;
    mapData.meow = 2;
    if (!assetManager) {
      $('#gameIntro').hide();
      assetManager = new AssetManager();
      loader = new PxLoader();
      assetManager.addAsset(loader.addImage('image/sprite1.png'), 'sprite1');
      assetManager.addAsset(loader.addImage('image/grass.png'), 'grass');
      assetManager.addAsset(loader.addImage('image/dirt.png'), 'dirt');
      assetManager.addAsset(loader.addImage('image/grass_and_water.png'), 'gw');
      loader.addCompletionListener(function() {
        return $('#gameIntro').show();
      });
      loader.start();
    }
    return $('#userSubmit').click(function(e) {
      var defaultTile, game, numCols, numRows;
      e.preventDefault();
      $('#menu').hide('slow');
      numRows = parseInt($('#userRows').val()) || 4;
      numCols = parseInt($('#userCols').val()) || 4;
      defaultTile = $('#userDefaultTile').val() || 'grass';
      return game = new Game(numRows, numCols, defaultTile);
    });
  };

  $(document).ready(init);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game(numberRows, numberCols, tile) {
      this.animloop = __bind(this.animloop, this);

      var defaultTile;
      Game.__super__.constructor.apply(this, arguments);
      this.createRenderer('canvas');
      this.renderer.fixSizeToScreen();
      this.displayTech(true);
      $("#toolbar").css("visibility", "visible");
      this.UI = new UI();
      defaultTile = new Sprite({
        spritesheet: assetManager.getAsset(tile)
      });
      this.grid = new IsometricGrid({
        width: numberRows,
        height: numberCols,
        defaultTile: defaultTile
      });
      this.buildingTileSet = new BuildingTileSet(assetManager.getAsset('sprite1'), 60, 60, 5, [2, 3, 4, 5, 1], [1000, 2000, 3000, 2000, 0]);
      this.building1 = this.buildingTileSet.getBuildingSprite(0);
      this.building2 = this.buildingTileSet.getBuildingSprite(1);
      this.building3 = this.buildingTileSet.getBuildingSprite(2);
      this.building4 = this.buildingTileSet.getBuildingSprite(3);
      this.building5 = this.buildingTileSet.getBuildingSprite(4);
      this.building1.setPosition(20, 20);
      this.building2.setPosition(40, 80);
      this.building3.setPosition(50, 120);
      this.building4.setPosition(60, 260);
      this.building5.setPosition(70, 370);
      this.animloop();
    }

    Game.prototype.animloop = function() {
      Game.__super__.animloop.apply(this, arguments);
      this.renderer.clear('#FFFFFF');
      this.grid.draw();
      this.building1.animate();
      this.building2.animate();
      this.building3.animate();
      this.building4.animate();
      this.building5.animate();
      return this.displayFps();
    };

    return Game;

  })(IsoGame);

  UI = (function() {

    function UI(parameters) {
      this.UIMouseDown = __bind(this.UIMouseDown, this);

      this.loadBuildingData = __bind(this.loadBuildingData, this);

      this.displayBuildingSelectonDialog = __bind(this.displayBuildingSelectonDialog, this);

      this.setupToolbar = __bind(this.setupToolbar, this);

      var _this = this;
      window.addEventListener('mousedown', function(e) {
        var button;
        button = e.which || e.button;
        if (button === 1) {
          return _this.UIMouseDown(e);
        }
      }, false);
      this.toolSelect = null;
      this.buildingSelectionToolBarVisible = false;
      this.setupToolbar();
    }

    UI.prototype.setupToolbar = function() {
      var flag, _i, _results,
        _this = this;
      $("#toolbar ul").append('<li id="zoomIn"></li>');
      $('#zoomIn').css('background', 'url(image/zoomin.png) no-repeat');
      $("#toolbar ul").append('<li id="zoomOut"></li>');
      $('#zoomOut').css('background', 'url(image/zoomout.png) no-repeat');
      $("#toolbar ul").append('<li id="demolish"></li>');
      $('#demolish').css('background', 'url(image/delete.png) no-repeat');
      _results = [];
      for (flag = _i = 1; _i <= 5; flag = ++_i) {
        $("#toolbar ul").append("<li id='iconSet" + flag + "'></li>");
        $("#iconSet" + flag).css("background", "url(image/flag" + flag + ".png) no-repeat");
        _results.push($("#iconSet" + flag).rightClick(function(e) {
          return _this.displayBuildingSelectonDialog(e.target.id);
        }));
      }
      return _results;
    };

    UI.prototype.displayBuildingSelectonDialog = function(id) {
      var _this = this;
      $("#setBuildingTileSet").css("visibility", "visible");
      $("#cancel").unbind("click").click(function() {
        return $("#setBuildingTileSet").css("visibility", "hidden");
      });
      return $("#ok").unbind("click").click(function() {
        var buildingTileSet, durationPerBuilding, flagNumber, framesPerBuilding, i, _i, _j;
        flagNumber = id.substring(7, id.length);
        framesPerBuilding = $("#framesPerBuilding").val().split(',');
        for (i = _i = 1; 1 <= framesPerBuilding ? _i <= framesPerBuilding : _i >= framesPerBuilding; i = 1 <= framesPerBuilding ? ++_i : --_i) {
          framesPerBuilding[i] = +framesPerBuilding[i];
        }
        durationPerBuilding = $("#durationPerBuilding").val().split(',');
        for (i = _j = 1; 1 <= durationPerBuilding ? _j <= durationPerBuilding : _j >= durationPerBuilding; i = 1 <= durationPerBuilding ? ++_j : --_j) {
          durationPerBuilding[i] = +durationPerBuilding[i];
        }
        buildingTileSet = new BuildingTileSet(assetManager.getAsset($("#buildingTileSetName").val()), $("#tileWidth").val(), $("#tileHeight").val(), $("#numberOfBuildings").val(), framesPerBuilding, durationPerBuilding);
        if (mapData.buildingTileSets === void 0) {
          mapData.buildingTileSets = new Array();
          mapData.buildingTileSets[flagNumber] = buildingTileSet;
        } else {
          mapData.buildingTileSets[flagNumber] = buildingTileSet;
        }
        _this.loadBuildingData(flagNumber);
        return $("#setBuildingTileSet").css("visibility", "hidden");
      });
    };

    UI.prototype.loadBuildingData = function(flagNumber) {
      var buildingTileSet, filename, i, index, spriteMap, _i, _ref;
      if (mapData.buildingTileSets !== void 0 && mapData.buildingTileSets[flagNumber] !== void 0) {
        buildingTileSet = mapData.buildingTileSets[flagNumber];
      } else {
        $("#buildingSelectionToolbar ul").empty();
        return;
      }
      $("#buildingSelectionToolbar ul").empty();
      spriteMap = mapData.buildingTileSets[flagNumber].spritesheet.src;
      index = spriteMap.lastIndexOf("/") + 1;
      filename = spriteMap.substr(index);
      for (i = _i = 0, _ref = mapData.buildingTileSets[flagNumber].numberOfBuildings - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        console.log('meow');
        $("#buildingSelectionToolbar ul").append("<li id='buildingIcon" + i + "'></li>");
        $("#buildingIcon" + i).css("background", "url(image/" + filename + ") 0 -" + (i * 60) + "px no-repeat");
      }
      $("#buildingSelectionToolbar li").css('width', "" + mapData.buildingTileSets[flagNumber].tileWidth + "px");
      $("#buildingSelectionToolbar li").css('height', "" + mapData.buildingTileSets[flagNumber].tileHeight + "px");
      return $("#buildingSelectionToolbar").css('height', "" + mapData.buildingTileSets[flagNumber].tileHeight + "px");
    };

    UI.prototype.UIMouseDown = function(e) {
      var idClickEle;
      idClickEle = e.target.getAttribute('id');
      if (idClickEle === 'canvas') {
        return;
      }
      if (idClickEle.indexOf("iconSet") !== -1) {
        if (this.buildingSelectionToolBarVisible === false) {
          this.buildingSelectionToolBarVisible = idClickEle.substring(7, idClickEle.length);
          this.toolSelect = 'build';
          $("#buildingSelectionToolbar").css("visibility", "visible");
          this.loadBuildingData(this.buildingSelectionToolBarVisible);
        } else {
          if (this.buildingSelectionToolBarVisible === idClickEle.substring(7, idClickEle.length)) {
            $("#buildingSelectionToolbar").css("visibility", "hidden");
            $("#buildingSelectionToolbar ul").empty();
            this.buildingSelectionToolBarVisible = false;
            this.toolSelect = null;
          } else {
            this.buildingSelectionToolBarVisible = idClickEle.substring(7, idClickEle.length);
            this.loadBuildingData(this.buildingSelectionToolBarVisible);
          }
        }
      }
      switch (idClickEle) {
        case 'zoomIn':
          this.toolSelect = 'zoomIn';
          return console.log('zoomIn');
      }
    };

    return UI;

  })();

}).call(this);
